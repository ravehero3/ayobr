# Svarog-Style Generate Videos Button - Implementation Task

## Overview
Implement a modern, gradient-styled "Generate Videos" button inspired by the Svarog design aesthetic. The button should have smooth animations, hover effects, and a professional appearance.

## Requirements

### HTML Structure
```html
<button class="generate-videos-btn" onclick="handleGenerateVideos()">
  <span class="btn-text">Generate Videos</span>
  <span class="btn-icon">→</span>
</button>
```

### CSS Styles
```css
.generate-videos-btn {
  /* Base styling */
  position: relative;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 16px 32px;
  border: none;
  border-radius: 50px;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  font-size: 16px;
  font-weight: 600;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  overflow: hidden;
  
  /* Gradient background */
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  
  /* Shadow effects */
  box-shadow: 
    0 4px 15px rgba(102, 126, 234, 0.3),
    0 2px 4px rgba(0, 0, 0, 0.1);
  
  /* Prevent text selection */
  user-select: none;
  -webkit-user-select: none;
}

.generate-videos-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
  opacity: 0;
  transition: opacity 0.3s ease;
  z-index: -1;
}

.generate-videos-btn:hover::before {
  opacity: 1;
}

.generate-videos-btn:hover {
  transform: translateY(-2px);
  box-shadow: 
    0 8px 25px rgba(102, 126, 234, 0.4),
    0 4px 8px rgba(0, 0, 0, 0.15);
}

.generate-videos-btn:active {
  transform: translateY(0);
  box-shadow: 
    0 2px 10px rgba(102, 126, 234, 0.3),
    0 1px 2px rgba(0, 0, 0, 0.1);
}

.btn-text {
  position: relative;
  z-index: 1;
}

.btn-icon {
  position: relative;
  z-index: 1;
  font-size: 18px;
  transition: transform 0.3s ease;
}

.generate-videos-btn:hover .btn-icon {
  transform: translateX(4px);
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .generate-videos-btn {
    padding: 14px 24px;
    font-size: 14px;
  }
}

/* Focus styles for accessibility */
.generate-videos-btn:focus {
  outline: none;
  box-shadow: 
    0 4px 15px rgba(102, 126, 234, 0.3),
    0 2px 4px rgba(0, 0, 0, 0.1),
    0 0 0 3px rgba(102, 126, 234, 0.2);
}

/* Loading state (optional) */
.generate-videos-btn.loading {
  pointer-events: none;
  opacity: 0.8;
}

.generate-videos-btn.loading .btn-icon {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}
```

### JavaScript Functionality
```javascript
function handleGenerateVideos() {
  const button = document.querySelector('.generate-videos-btn');
  
  // Add loading state
  button.classList.add('loading');
  button.querySelector('.btn-text').textContent = 'Generating...';
  button.querySelector('.btn-icon').textContent = '⟳';
  
  // Your video generation logic here
  generateVideos()
    .then(result => {
      // Success state
      button.classList.remove('loading');
      button.querySelector('.btn-text').textContent = 'Generate Videos';
      button.querySelector('.btn-icon').textContent = '→';
      
      // Handle success
      console.log('Videos generated successfully:', result);
    })
    .catch(error => {
      // Error state
      button.classList.remove('loading');
      button.querySelector('.btn-text').textContent = 'Try Again';
      button.querySelector('.btn-icon').textContent = '↻';
      
      // Handle error
      console.error('Error generating videos:', error);
      
      // Reset button after 3 seconds
      setTimeout(() => {
        button.querySelector('.btn-text').textContent = 'Generate Videos';
        button.querySelector('.btn-icon').textContent = '→';
      }, 3000);
    });
}

// Placeholder for your actual video generation function
async function generateVideos() {
  // Replace this with your actual video generation logic
  return new Promise((resolve, reject) => {
    // Simulate API call
    setTimeout(() => {
      // Simulate success/failure
      if (Math.random() > 0.3) {
        resolve({ success: true, videos: ['video1.mp4', 'video2.mp4'] });
      } else {
        reject(new Error('Failed to generate videos'));
      }
    }, 2000);
  });
}
```

## Implementation Steps

1. **Add HTML**: Place the button HTML in your desired location in the app
2. **Add CSS**: Include the CSS styles in your stylesheet or `<style>` tag
3. **Add JavaScript**: Include the JavaScript functionality
4. **Integration**: Connect the `generateVideos()` function to your actual video generation API
5. **Testing**: Test hover effects, click functionality, and loading states

## Customization Options

### Color Variations
```css
/* Purple to Pink */
background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);

/* Blue to Cyan */
background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);

/* Orange to Red */
background: linear-gradient(135deg, #fa709a 0%, #fee140 100%);

/* Green to Blue */
background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
```

### Size Variations
```css
/* Large button */
.generate-videos-btn.large {
  padding: 20px 40px;
  font-size: 18px;
}

/* Small button */
.generate-videos-btn.small {
  padding: 12px 24px;
  font-size: 14px;
}
```

## Accessibility Features

- Proper focus states with visible outline
- Keyboard navigation support
- Screen reader friendly text
- Sufficient color contrast
- Responsive design for mobile devices

## Browser Compatibility

- Chrome/Edge: Full support
- Firefox: Full support
- Safari: Full support
- IE11: Basic support (no CSS Grid, reduced animations)

## Notes

- The button uses modern CSS features like `cubic-bezier` transitions and CSS Grid
- The gradient can be customized to match your brand colors
- The loading state provides visual feedback during async operations
- All animations are smooth and performant
- The button is fully responsive and accessible