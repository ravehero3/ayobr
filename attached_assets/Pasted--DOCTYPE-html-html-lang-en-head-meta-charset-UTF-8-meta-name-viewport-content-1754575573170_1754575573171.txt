<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Glassmorphism Video Loader</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            overflow: hidden;
        }

        .container {
            position: relative;
            width: 420px;
            height: 280px;
            background: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(20px);
            -webkit-backdrop-filter: blur(20px);
            border-radius: 24px;
            border: 1px solid rgba(255, 255, 255, 0.12);
            box-shadow: 
                0 25px 45px rgba(0, 0, 0, 0.4),
                inset 0 1px 0 rgba(255, 255, 255, 0.15),
                inset 0 -1px 0 rgba(0, 0, 0, 0.3);
            padding: 32px;
            box-sizing: border-box;
            animation: containerGlow 3s ease-in-out infinite alternate;
        }

        @keyframes containerGlow {
            0% {
                box-shadow: 
                    0 25px 45px rgba(0, 0, 0, 0.4),
                    inset 0 1px 0 rgba(255, 255, 255, 0.15),
                    inset 0 -1px 0 rgba(0, 0, 0, 0.3),
                    0 0 30px rgba(59, 130, 246, 0.1);
            }
            100% {
                box-shadow: 
                    0 25px 45px rgba(0, 0, 0, 0.4),
                    inset 0 1px 0 rgba(255, 255, 255, 0.15),
                    inset 0 -1px 0 rgba(0, 0, 0, 0.3),
                    0 0 50px rgba(59, 130, 246, 0.2);
            }
        }

        .close-btn {
            position: absolute;
            top: 16px;
            right: 16px;
            width: 32px;
            height: 32px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            backdrop-filter: blur(10px);
        }

        .close-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

        .close-btn::before,
        .close-btn::after {
            content: '';
            position: absolute;
            width: 14px;
            height: 2px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 1px;
            transition: all 0.3s ease;
        }

        .close-btn::before {
            transform: rotate(45deg);
        }

        .close-btn::after {
            transform: rotate(-45deg);
        }

        .close-btn:hover::before,
        .close-btn:hover::after {
            background: #ffffff;
        }

        .content {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            text-align: center;
            position: relative;
            z-index: 2;
        }

        .icon {
            width: 64px;
            height: 64px;
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(59, 130, 246, 0.3);
            animation: iconPulse 2s ease-in-out infinite;
        }

        @keyframes iconPulse {
            0%, 100% {
                transform: scale(1);
                box-shadow: 0 8px 32px rgba(59, 130, 246, 0.3);
            }
            50% {
                transform: scale(1.05);
                box-shadow: 0 12px 40px rgba(59, 130, 246, 0.4);
            }
        }

        .icon::before {
            content: '';
            width: 24px;
            height: 24px;
            background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='white' viewBox='0 0 24 24'%3E%3Cpath d='M8 5v14l11-7z'/%3E%3C/svg%3E") no-repeat center;
            background-size: contain;
        }

        .title {
            font-size: 20px;
            font-weight: 600;
            color: #ffffff;
            margin-bottom: 8px;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }

        .subtitle {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.7);
            margin-bottom: 32px;
            line-height: 1.4;
        }

        .progress-container {
            position: relative;
            width: 100%;
            height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
            overflow: hidden;
            margin-bottom: 16px;
            cursor: pointer;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #3b82f6 0%, #1e40af 50%, #3b82f6 100%);
            border-radius: 3px;
            width: 0%;
            animation: progressAnimation 4s ease-in-out infinite;
            position: relative;
            box-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
        }

        .progress-bar::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent 0%, rgba(255, 255, 255, 0.3) 50%, transparent 100%);
            animation: shimmer 2s ease-in-out infinite;
        }

        @keyframes progressAnimation {
            0% { width: 0%; }
            70% { width: 85%; }
            100% { width: 100%; }
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(200%); }
        }

        .progress-text {
            font-size: 12px;
            color: rgba(255, 255, 255, 0.6);
            font-weight: 500;
        }

        .particles {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
            overflow: hidden;
            border-radius: 24px;
        }

        .particle {
            position: absolute;
            width: 3px;
            height: 3px;
            background: #3b82f6;
            border-radius: 50%;
            opacity: 0;
            pointer-events: none;
            box-shadow: 0 0 6px #3b82f6;
        }

        @keyframes particleFloat {
            0% {
                transform: translateY(20px) translateX(0) scale(0);
                opacity: 0;
            }
            20% {
                opacity: 1;
                transform: translateY(0) translateX(0) scale(1);
            }
            80% {
                opacity: 1;
                transform: translateY(-20px) translateX(var(--random-x, 0)) scale(1);
            }
            100% {
                transform: translateY(-40px) translateX(var(--random-x, 0)) scale(0);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="close-btn"></div>
        <div class="particles" id="particles"></div>
        
        <div class="content">
            <div class="icon"></div>
            <div class="title">Creating Video</div>
            <div class="subtitle">Combining your audio and image files<br>into a beautiful video experience</div>
            
            <div class="progress-container" id="progressContainer">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            <div class="progress-text" id="progressText">Processing... 0%</div>
        </div>
    </div>

    <script>
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const progressContainer = document.getElementById('progressContainer');
        const particlesContainer = document.getElementById('particles');

        let currentProgress = 0;
        let particles = [];

        // Simulate progress
        function updateProgress() {
            if (currentProgress < 100) {
                currentProgress += Math.random() * 3;
                currentProgress = Math.min(currentProgress, 100);
                
                progressBar.style.width = currentProgress + '%';
                progressText.textContent = `Processing... ${Math.floor(currentProgress)}%`;
                
                if (currentProgress >= 100) {
                    progressText.textContent = 'Video Ready!';
                    setTimeout(() => {
                        progressText.textContent = 'Complete âœ¨';
                    }, 500);
                }
            }
        }

        // Create particle
        function createParticle(x, y) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            
            const randomX = (Math.random() - 0.5) * 60;
            const size = Math.random() * 2 + 2;
            const duration = Math.random() * 1000 + 1500;
            
            particle.style.left = x + 'px';
            particle.style.top = y + 'px';
            particle.style.width = size + 'px';
            particle.style.height = size + 'px';
            particle.style.setProperty('--random-x', randomX + 'px');
            particle.style.animation = `particleFloat ${duration}ms ease-out forwards`;
            
            // Random color variations
            const colors = ['#3b82f6', '#1e40af', '#60a5fa', '#93c5fd'];
            particle.style.background = colors[Math.floor(Math.random() * colors.length)];
            particle.style.boxShadow = `0 0 6px ${particle.style.background}`;
            
            particlesContainer.appendChild(particle);
            
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, duration);
        }

        // Mouse hover particle effect
        progressContainer.addEventListener('mouseenter', () => {
            const interval = setInterval(() => {
                if (progressContainer.matches(':hover')) {
                    const rect = progressContainer.getBoundingClientRect();
                    const containerRect = particlesContainer.getBoundingClientRect();
                    
                    const x = Math.random() * rect.width;
                    const y = rect.top - containerRect.top + rect.height / 2;
                    
                    createParticle(x, y);
                } else {
                    clearInterval(interval);
                }
            }, 100);
        });

        // Ambient particle effect
        setInterval(() => {
            if (Math.random() < 0.3) {
                const x = Math.random() * 420;
                const y = Math.random() * 100 + 150;
                createParticle(x, y);
            }
        }, 2000);

        // Update progress
        const progressInterval = setInterval(() => {
            updateProgress();
            if (currentProgress >= 100) {
                clearInterval(progressInterval);
            }
        }, 200);

        // Close button functionality
        document.querySelector('.close-btn').addEventListener('click', () => {
            document.querySelector('.container').style.animation = 'containerGlow 0.3s ease-out forwards, fadeOut 0.3s ease-out 0.1s forwards';
        });

        // Add fadeOut animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeOut {
                to {
                    opacity: 0;
                    transform: scale(0.9);
                }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html>